{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GridGifItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GridGifItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAkB5C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBS,SAACP,GAClBF,EAAcE,EAAEQ,OAAOF,a,+BCShBG,EAjBF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACNC,EADM,iDAC2CC,UAAWH,GADtD,+DAEOI,MAAMF,GAFb,cAENG,EAFM,gBAGSA,EAAKC,OAHd,uBAGLC,EAHK,EAGLA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAT7B,kBAaLM,GAbK,4CAAH,sDCEAO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAkBtC,OAZAC,qBAAW,WACPxB,EAAQC,GACHwB,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,UAEZ,CAACpB,IAEGqB,EDfwBM,CAAa3B,GAAhCa,EAFuB,EAE5BN,KAAaa,EAFe,EAEfA,QAEpB,OACI,qCACI,6BAAKpB,IAEHoB,GAAW,wCAEb,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEZxBiB,EAAe,WAAO,IAAD,EAEM1C,mBAAS,CAAC,gBAFhB,mBAEvB2C,EAFuB,KAEX5C,EAFW,KAI9B,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ4C,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEEA,SAAUA,GADLA,Y,MCZ3B8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.74aa8fb1.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport ProtoTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handleChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(inputValue.trim().length > 2){\n            //console.log('Submit hecho');\n            setCategories(cats => [inputValue, ...cats])\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>            \n            <input\n                type=\"text\"         \n                value={inputValue}       \n                onChange={ handleChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: ProtoTypes.func.isRequired\n}\n","const getGifs = async( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=ESRsLQ0gJkKY058q47fUGikJzx0x0RzQ`\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url,\n        }\n    })\n\n    return gifs;\n\n}\n\nexport default getGifs","import React from 'react'\n\nexport const GridGifItem = ({id, title, url}) => {       \n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GridGifItem } from './GridGifItem'\n\nexport const GifGrid = ({category}) => {    \n    \n    const {data:images, loading} = useFetchGifs(category);    \n\n    return (\n        <>\n            <h3>{category}</h3>   \n\n            { loading && <p>Loading</p> }          \n\n            <div className=\"card-grid\">                      \n                {\n                    images.map(img => (\n                        <GridGifItem\n                            key={img.id}\n                            {...img}\n                        />\n                    ))        \n                }                                          \n            </div>\n        </>\n    )\n}\n","import {useState, useEffect} from 'react'\nimport getGifs from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifs(category)\n            .then(imgs => {\n                setTimeout(() => {\n                    setState({\n                        data: imgs,\n                        loading: false\n                    })\n                }, 3000)\n            })\n    }, [category])\n\n    return state;\n}","import React, {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\n//GifExpertApp\nexport const GifExpertApp = () => {\n    \n    const [categories, setCategories] = useState(['Dragon Ball'])\n   \n    return(\n      <>\n        <h2>GifExpertApp</h2>\n        <AddCategory setCategories={setCategories}/>\n        <hr />        \n        <ol>\n            {\n                categories.map(category => (\n                    <GifGrid \n                      key={category}\n                      category={category} \n                    />\n                ))\n            }\n        </ol>\n      </>\n    )\n  }\n  \n ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(  \n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}